.TH "ParticleTracking::WakeFieldProcess" 3 "Fri Aug 4 2017" "Version 5.02" "Merlin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ParticleTracking::WakeFieldProcess
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <WakeFieldProcess\&.h>\fP
.PP
Inherits \fBTBunchProc< B >\fP\&.
.PP
Inherited by \fBParticleTracking::CollimatorWakeProcess\fP, and \fBParticleTracking::CouplerWakeFieldProcess\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBImpulseLocation\fP { \fBatCentre\fP, \fBatExit\fP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBWakeFieldProcess\fP (int prio, size_t nb=100, double ns=3\&.0, string aID='WAKEFIELD')"
.br
.ti -1c
.RI "virtual void \fBInitialiseProcess\fP (\fBBunch\fP &bunch)"
.br
.ti -1c
.RI "virtual void \fBSetCurrentComponent\fP (\fBAcceleratorComponent\fP &component)"
.br
.ti -1c
.RI "virtual void \fBDoProcess\fP (double ds)"
.br
.ti -1c
.RI "virtual double \fBGetMaxAllowedStepSize\fP () const"
.br
.ti -1c
.RI "void \fBApplyImpulseAt\fP (ImpulseLocation loc)"
.br
.ti -1c
.RI "void \fBIncludeTransverseWake\fP (bool flg)"
.br
.ti -1c
.RI "void \fBDumpSliceCentroids\fP (ostream &) const"
.br
.ti -1c
.RI "void \fBSetFilter\fP (int n, int m, int d)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBInit\fP ()"
.br
.ti -1c
.RI "size_t \fBCalculateQdist\fP ()"
.br
.ti -1c
.RI "virtual void \fBCalculateWakeL\fP ()"
.br
.ti -1c
.RI "virtual void \fBCalculateWakeT\fP ()"
.br
.ti -1c
.RI "virtual void \fBApplyWakefield\fP (double ds)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "ImpulseLocation \fBimploc\fP"
.br
.ti -1c
.RI "double \fBcurrent_s\fP"
.br
.ti -1c
.RI "double \fBimpulse_s\fP"
.br
.ti -1c
.RI "double \fBclen\fP"
.br
.ti -1c
.RI "size_t \fBnbins\fP"
.br
.ti -1c
.RI "double \fBnsig\fP"
.br
.ti -1c
.RI "\fBWakePotentials\fP * \fBcurrentWake\fP"
.br
.ti -1c
.RI "std::vector< ParticleBunch::iterator > \fBbunchSlices\fP"
.br
.ti -1c
.RI "std::vector< double > \fBQd\fP"
.br
.ti -1c
.RI "std::vector< double > \fBQdp\fP"
.br
.ti -1c
.RI "std::vector< double > * \fBfilter\fP"
.br
.ti -1c
.RI "std::vector< double > \fBwake_x\fP"
.br
.ti -1c
.RI "std::vector< double > \fBwake_y\fP"
.br
.ti -1c
.RI "std::vector< double > \fBwake_z\fP"
.br
.ti -1c
.RI "bool \fBrecalc\fP"
.br
.ti -1c
.RI "bool \fBinc_tw\fP"
.br
.ti -1c
.RI "double \fBzmin\fP"
.br
.ti -1c
.RI "double \fBzmax\fP"
.br
.ti -1c
.RI "double \fBdz\fP"
.br
.ti -1c
.RI "size_t \fBoldBunchLen\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
class WakefieldProcess Implements single-bunch wakefields\&.
.PP
Modified by A\&.Wolski 12/2/2003 to include the derivative of the charge distribution for handling CSR wake fields\&.
.PP
Modified by D\&.Kruecker 18\&.2\&.2008 to be used as base class for other wakefield types (collimator,coupler,\&.\&.\&.) 

.SH "Author"
.PP 
Generated automatically by Doxygen for Merlin from the source code\&.
