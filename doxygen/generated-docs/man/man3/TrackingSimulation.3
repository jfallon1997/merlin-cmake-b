.TH "TrackingSimulation" 3 "Fri Aug 4 2017" "Version 5.02" "Merlin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
TrackingSimulation
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <TrackingSimulation\&.h>\fP
.PP
Inherited by \fBBunchTracker< P >\fP, and \fBTTrackSim< T >\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef TStepper< AcceleratorModel::BeamlineIterator > \fBBeamlineStepper\fP"
.br
.ti -1c
.RI "typedef TStepper< \fBAcceleratorModel::RingIterator\fP > \fBRingStepper\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBTrackingSimulation\fP (const \fBAcceleratorModel::Beamline\fP &bline)"
.br
.ti -1c
.RI "\fBTrackingSimulation\fP (const \fBAcceleratorModel::RingIterator\fP &aRing)"
.br
.ti -1c
.RI "void \fBSetBeamline\fP (const \fBAcceleratorModel::Beamline\fP &bline)"
.br
.ti -1c
.RI "void \fBSetRing\fP (const \fBAcceleratorModel::RingIterator\fP &aRing)"
.br
.ti -1c
.RI "virtual \fBBunch\fP & \fBRun\fP ()"
.br
.ti -1c
.RI "virtual \fBBunch\fP & \fBContinue\fP ()"
.br
.ti -1c
.RI "void \fBAddProcess\fP (\fBBunchProcess\fP *proc)"
.br
.ti -1c
.RI "bool \fBRemoveProcess\fP (\fBBunchProcess\fP *proc)"
.br
.ti -1c
.RI "void \fBAssumeFlatLattice\fP (bool flat)"
.br
.ti -1c
.RI "void \fBInjectBeamOnAxis\fP (bool onAxis)"
.br
.ti -1c
.RI "void \fBSetInitialBunchCtor\fP (\fBBunchConstructor\fP *bctor)"
.br
.ti -1c
.RI "void \fBSetLogStream\fP (ostream &os)"
.br
.ti -1c
.RI "void \fBSetLoggingOn\fP ()"
.br
.ti -1c
.RI "void \fBSetLoggingOff\fP ()"
.br
.ti -1c
.RI "void \fBHandleExceptions\fP (bool handle)"
.br
.ti -1c
.RI "void \fBInitStepper\fP (bool genNewBunch=true)"
.br
.ti -1c
.RI "void \fBInitStepper\fP (\fBBunch\fP *aBunch)"
.br
.ti -1c
.RI "bool \fBStepComponent\fP ()"
.br
.ti -1c
.RI "\fBComponentFrame\fP & \fBGetCurrentFrame\fP ()"
.br
.ti -1c
.RI "\fBAcceleratorComponent\fP & \fBGetCurrentComponent\fP ()"
.br
.ti -1c
.RI "void \fBSetOutput\fP (\fBSimulationOutput\fP *simout)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBBunch\fP & \fBDoRun\fP (bool new_bunch, bool do_init)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBBunch\fP * \fBbunch\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
A beam dynamics simulation\&. \fBTrackingSimulation\fP tracks a \fBBunch\fP object through a specified Beamline (single pass)\&. Tracking is performed by one or more \fBBunchProcess\fP objects, one of which is generally a transport process which is responsible for 'tracking' the concrete \fBBunch\fP implementation through the Beamline components\&. The initial \fBBunch\fP is generated on each Run using the supplied \fBBunchConstructor\fP\&. 
.SH "Member Function Documentation"
.PP 
.SS "void TrackingSimulation::AddProcess (\fBBunchProcess\fP * proc)"
Add a \fBBunchProcess\fP to the simulation\&. 
.SS "void TrackingSimulation::AssumeFlatLattice (bool flat)"
if flat is true, the simulation ignores all coordinate transformations between lattice components\&. If flat is false (default), the simulation applies all necessary in- and out-transformations for each component in the beamline\&. 
.SS "\fBBunch\fP & TrackingSimulation::Continue ()\fC [virtual]\fP"
Run the simulation again without constructing a new bunch or (re-)initialising the BunchProcesses\&. This function can only be called after an initial \fBRun()\fP method is called\&. 
.SS "\fBAcceleratorComponent\fP& TrackingSimulation::GetCurrentComponent ()\fC [inline]\fP"
Returns the current component, i\&.e\&. that component that is about to be tracked by a call to \fBStepComponent()\fP\&. 
.SS "\fBComponentFrame\fP& TrackingSimulation::GetCurrentFrame ()\fC [inline]\fP"
Returns the current frame, i\&.e\&. that frame that is about to be tracked by a call to \fBStepComponent()\fP\&. 
.SS "void TrackingSimulation::HandleExceptions (bool handle)\fC [inline]\fP"
If handle==true, then any \fBMerlinException\fP thrown while the simulation is running is handled locally, and \fBRun()\fP command exits normally\&. If false, any exception is re-thrown\&. 
.SS "void TrackingSimulation::InitStepper (bool genNewBunch = \fCtrue\fP)"
Initialise a new bunch object for tracking, and resets the current frame to the first frame of the beamline\&. 
.SS "void TrackingSimulation::InitStepper (\fBBunch\fP * aBunch)"
Sets the specified bunch for tracking, and resets the current frame to the first frame of the beamline\&. 
.SS "void TrackingSimulation::InjectBeamOnAxis (bool onAxis)\fC [inline]\fP"
If onAxis is true, tracking simulation ignores any coordination transformation for the first component frame tracked\&. This effectively injects the 'beam' on the local components axis, irrespective of its alignment state\&. 
.SS "bool TrackingSimulation::RemoveProcess (\fBBunchProcess\fP * proc)"
Remove the specified \fBBunchProcess\fP from the simulation\&. Returns true if successful\&. 
.SS "\fBBunch\fP & TrackingSimulation::Run ()\fC [virtual]\fP"
Run the simulation\&. A new bunch is constructed using the current \fBBunchConstructor\fP object, and all the processes are initialised\&. 
.SS "void TrackingSimulation::SetInitialBunchCtor (\fBBunchConstructor\fP * bctor)"
Sets the initial bunch constructor\&. 
.SS "bool TrackingSimulation::StepComponent ()"
Track the bunch though the next \fBComponentFrame\fP in the beamline\&. Returns false if that component is the last in the beamline\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Merlin from the source code\&.
