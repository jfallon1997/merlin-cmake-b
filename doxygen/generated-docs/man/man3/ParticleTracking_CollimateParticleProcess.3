.TH "ParticleTracking::CollimateParticleProcess" 3 "Fri Aug 4 2017" "Version 5.02" "Merlin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ParticleTracking::CollimateParticleProcess
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CollimateParticleProcess\&.h>\fP
.PP
Inherits \fBTBunchProc< B >\fP\&.
.PP
Inherited by \fBParticleTracking::CollimateProtonProcess\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef map< string, int > \fBIDTBL\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBCollimateParticleProcess\fP (int priority, int mode, std::ostream *osp=nullptr)"
.br
.ti -1c
.RI "virtual void \fBInitialiseProcess\fP (\fBBunch\fP &bunch)"
.br
.ti -1c
.RI "virtual void \fBSetCurrentComponent\fP (\fBAcceleratorComponent\fP &component)"
.br
.ti -1c
.RI "virtual void \fBDoProcess\fP (double ds)"
.br
.ti -1c
.RI "virtual double \fBGetMaxAllowedStepSize\fP () const"
.br
.ti -1c
.RI "void \fBScatterAtCollimator\fP (bool tf)"
.br
.ti -1c
.RI "void \fBCreateParticleLossFiles\fP (bool flg, string fprefix='')"
.br
.ti -1c
.RI "void \fBIndexParticles\fP (bool index)"
.br
.ti -1c
.RI "void \fBIndexParticles\fP (std::list< size_t > &anIndex)"
.br
.ti -1c
.RI "const std::list< size_t > & \fBGetIndecies\fP () const"
.br
.ti -1c
.RI "void \fBSetLossThreshold\fP (double losspc)"
.br
.ti -1c
.RI "void \fBSetLogStream\fP (std::ostream *anOs)"
.br
.ti -1c
.RI "void \fBEnableImperfections\fP (bool)"
.br
.ti -1c
.RI "virtual double \fBGetOutputBinSize\fP () const"
.br
.ti -1c
.RI "virtual void \fBSetOutputBinSize\fP (double)"
.br
.ti -1c
.RI "virtual void \fBSetCollimationOutput\fP (\fBCollimationOutput\fP *odb)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "std::vector< \fBCollimationOutput\fP * > \fBCollimationOutputVector\fP"
.br
.ti -1c
.RI "std::vector< \fBCollimationOutput\fP * >::iterator \fBCollimationOutputIterator\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "double \fBGetBinSize\fP () const"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "int \fBcmode\fP"
.br
.ti -1c
.RI "std::ostream * \fBos\fP"
.br
.ti -1c
.RI "bool \fBcreateLossFiles\fP"
.br
.ti -1c
.RI "string \fBfile_prefix\fP"
.br
.ti -1c
.RI "double \fBlossThreshold\fP"
.br
.ti -1c
.RI "size_t \fBnstart\fP"
.br
.ti -1c
.RI "std::list< size_t > * \fBpindex\fP"
.br
.ti -1c
.RI "\fBIDTBL\fP \fBidtbl\fP"
.br
.ti -1c
.RI "PSvectorArray \fBInputArray\fP"
.br
.ti -1c
.RI "double \fBs_total\fP"
.br
.ti -1c
.RI "double \fBs\fP"
.br
.ti -1c
.RI "double \fBnext_s\fP"
.br
.ti -1c
.RI "double \fBlen\fP"
.br
.ti -1c
.RI "bool \fBis_collimator\fP"
.br
.ti -1c
.RI "bool \fBat_entr\fP"
.br
.ti -1c
.RI "bool \fBat_cent\fP"
.br
.ti -1c
.RI "bool \fBat_exit\fP"
.br
.ti -1c
.RI "size_t \fBnlost\fP"
.br
.ti -1c
.RI "bool \fBCollimationOutputSet\fP"
.br
.ti -1c
.RI "int \fBColParProTurn\fP"
.br
.ti -1c
.RI "std::string \fBFirstElementName\fP"
.br
.ti -1c
.RI "double \fBFirstElementS\fP"
.br
.ti -1c
.RI "bool \fBFirstElementSet\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
A process which effectively collimates the particle beam, given the aperture of the current component\&. Collimation within a component can occur at one or more positions:
.PP
COLL_AT_ENTRANCE, COLL_AT_CENTER, COLL_AT_EXIT 
.SH "Member Typedef Documentation"
.PP 
.SS "typedef map<string,int> \fBParticleTracking::CollimateParticleProcess::IDTBL\fP"
Used to generate unique filenames for particle loss data files\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "ParticleTracking::CollimateParticleProcess::CollimateParticleProcess (int priority, int mode, std::ostream * osp = \fCnullptr\fP)"
Constructor taking the collimation mode, and the output stream pointer to which to print the results\&. mode can be a logical OR combination of the collimation modes\&. A nullptr for osp (default) suppresses output\&. 
.SH "Member Function Documentation"
.PP 
.SS "void ParticleTracking::CollimateParticleProcess::CreateParticleLossFiles (bool flg, string fprefix = \fC''\fP)\fC [inline]\fP"
If flg is true, then files are generated containing the lost (collimated) particles\&. The file names have the form {fprefix\&.}type\&.id\&.n\&.loss, where the string fprefix is optional, type\&.id is the qualified name of the element where the particle loss occurs, and n is an occurrence count for like-named elements (starting with n=1)\&. 
.SS "void ParticleTracking::CollimateParticleProcess::DoProcess (double ds)\fC [virtual]\fP"
Preform the process for the specified step ds\&. 
.PP
Implements \fBBunchProcess\fP\&.
.SS "void ParticleTracking::CollimateParticleProcess::EnableImperfections (bool enable)"
Enable collimator jaw imperfections 
.SS "double ParticleTracking::CollimateParticleProcess::GetMaxAllowedStepSize () const\fC [virtual]\fP"
Returns the current maximum step length for this process\&. 
.PP
Implements \fBBunchProcess\fP\&.
.SS "void ParticleTracking::CollimateParticleProcess::IndexParticles (bool index)"
If index is true, then the initial particles are sequential indexed (1\&.\&.n)\&. These index values for each particle are then maintained, and output during any particle output operation (as the first column)\&. The indexing allows particles to be traced back to the original cooridinates\&. 
.SS "void ParticleTracking::CollimateParticleProcess::InitialiseProcess (\fBBunch\fP & bunch)\fC [virtual]\fP"
Initialise this process with the specified \fBBunch\fP\&. If bunch is not a \fBParticleBunch\fP object, the process becomes inactive\&. 
.PP
Reimplemented from \fBTBunchProc< B >\fP\&.
.SS "void ParticleTracking::CollimateParticleProcess::ScatterAtCollimator (bool tf)\fC [inline]\fP"
If set to true, the process scatters the particles in energy and angle at a \fBCollimator\fP element, if the particle is outside the aperture\&. 
.SS "void ParticleTracking::CollimateParticleProcess::SetCurrentComponent (\fBAcceleratorComponent\fP & component)\fC [virtual]\fP"
Sets the current accelerator component\&. 
.PP
Reimplemented from \fBBunchProcess\fP\&.
.SS "void ParticleTracking::CollimateParticleProcess::SetLogStream (std::ostream * anOs)\fC [inline]\fP"
Set the log stream for the process\&. A nullptr turns logging off\&. 
.SS "void ParticleTracking::CollimateParticleProcess::SetLossThreshold (double losspc)"
Sets the threshold for particle loss before the process throws ParticleLossThreshold exception\&. The value is in % of the initial particle number (default = 100%)\&. 
.SH "Member Data Documentation"
.PP 
.SS "PSvectorArray ParticleTracking::CollimateParticleProcess::InputArray\fC [protected]\fP"
The input array 
.SS "double ParticleTracking::CollimateParticleProcess::len\fC [protected]\fP"
physical length 

.SH "Author"
.PP 
Generated automatically by Doxygen for Merlin from the source code\&.
