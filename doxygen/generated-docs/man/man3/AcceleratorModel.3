.TH "AcceleratorModel" 3 "Fri Aug 4 2017" "Version 5.02" "Merlin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
AcceleratorModel
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBBadRange\fP"
.br
.ti -1c
.RI "class \fBBeamline\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef size_t \fBIndex\fP"
.br
.ti -1c
.RI "typedef std::vector< \fBComponentFrame\fP * > \fBFlatLattice\fP"
.br
.ti -1c
.RI "typedef FlatLattice::iterator \fBBeamlineIterator\fP"
.br
.ti -1c
.RI "typedef FlatLattice::const_iterator \fBConstBeamlineIterator\fP"
.br
.ti -1c
.RI "typedef \fBring_iterator\fP< \fBFlatLattice\fP, FlatLattice::iterator > \fBRingIterator\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBAcceleratorModel\fP ()"
.br
.ti -1c
.RI "\fB~AcceleratorModel\fP ()"
.br
.ti -1c
.RI "\fBBeamline\fP \fBGetBeamline\fP ()"
.br
.ti -1c
.RI "\fBBeamline\fP \fBGetBeamline\fP (Index n1, Index n2)"
.br
.ti -1c
.RI "\fBBeamline\fP \fBGetBeamline\fP (const string &pat1, const string &pat2, int n1=1, int n2=1)"
.br
.ti -1c
.RI "\fBRingIterator\fP \fBGetRing\fP (int n=0)"
.br
.ti -1c
.RI "\fBBeamline\fP \fBGetReversedBeamline\fP ()"
.br
.ti -1c
.RI "int \fBExtractComponents\fP (const string &pat, vector< \fBComponentFrame\fP *> &results)"
.br
.ti -1c
.RI "int \fBExtractModelElements\fP (const string &pat, vector< \fBModelElement\fP *> &results)"
.br
.ti -1c
.RI "template<class T > int \fBExtractTypedComponents\fP (vector< \fBTComponentFrame\fP< T > *> &results, const string &pattern='*')"
.br
.ti -1c
.RI "template<class T > int \fBExtractTypedElements\fP (T &results, const string &pattern='*')"
.br
.ti -1c
.RI "size_t \fBGetIndecies\fP (const std::string &pat, std::vector< Index > &iarray) const"
.br
.ti -1c
.RI "size_t \fBGetIndecies\fP (const \fBBeamline\fP &aBeamline, const std::string &pat, std::vector< Index > &iarray) const"
.br
.ti -1c
.RI "size_t \fBGetROChannels\fP (const string &chID, std::vector< \fBROChannel\fP *> &channels)"
.br
.ti -1c
.RI "size_t \fBGetRWChannels\fP (const string &chID, std::vector< \fBRWChannel\fP *> &channels)"
.br
.ti -1c
.RI "size_t \fBGetROChannels\fP (\fBBeamline\fP &aBeamline, const std::string &chID, std::vector< \fBROChannel\fP *> &channels)"
.br
.ti -1c
.RI "size_t \fBGetRWChannels\fP (\fBBeamline\fP &aBeamline, const std::string &chID, std::vector< \fBRWChannel\fP *> &channels)"
.br
.ti -1c
.RI "\fBLatticeFrame\fP & \fBGetGlobalFrame\fP ()"
.br
.ti -1c
.RI "const \fBLatticeFrame\fP & \fBGetGlobalFrame\fP () const"
.br
.ti -1c
.RI "void \fBAddModelElement\fP (\fBModelElement\fP *element)"
.br
.ti -1c
.RI "void \fBReportModelStatistics\fP (std::ostream &os) const"
.br
.ti -1c
.RI "size_t \fBGetAcceleratorSupports\fP (AcceleratorSupportList &supports)"
.br
.ti -1c
.RI "int \fBFindElementLatticePosition\fP (string RequestedElement)"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBAcceleratorModelConstructor\fP"
.br
.in -1c
.SH "Member Typedef Documentation"
.PP 
.SS "typedef std::vector<\fBComponentFrame\fP*> \fBAcceleratorModel::FlatLattice\fP"
A sequence of \fBComponentFrame\fP objects representing the complete accelerator lattice\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "AcceleratorModel::AcceleratorModel ()"
Constructor\&. 
.SS "AcceleratorModel::~AcceleratorModel ()"
Destructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "void AcceleratorModel::AddModelElement (\fBModelElement\fP * element)"
Allows clients to construct and add new \fBModelElement\fP objects to the \fBAcceleratorModel\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIelement\fP A pointer to the \fBModelElement\fP to add to the \fBAcceleratorModel\fP\&. 
.RE
.PP

.SS "int AcceleratorModel::ExtractComponents (const string & pat, vector< \fBComponentFrame\fP *> & results)"
Returns in results all \fBComponentFrame\fP objects whose name matches the string pattern pat\&. Returns the length of results on exit\&. Note that the previous contents of results is overwritten\&. Components are returned in \fBBeamline\fP order\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpat\fP The pattern of element names that should be matched\&. 
.br
\fIresults\fP The vector of \fBComponentFrame\fP pointers that will contain the output results\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
An integer containing the number of extracted components\&. 
.RE
.PP

.SS "int AcceleratorModel::ExtractModelElements (const string & pat, vector< \fBModelElement\fP *> & results)"
Returns in results all \fBModelElement\fP objects whose name matches the string pattern pat\&. Returns the length of results on exit\&. Note that the previous contents of results is overwritten\&. The order results is undefined\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpat\fP The pattern of element names that should be matched\&. 
.br
\fIresults\fP The vector of \fBModelElement\fP pointers that will contain the output results\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
An integer containing the number of extracted model elements\&. 
.RE
.PP

.SS "template<class T > int AcceleratorModel::ExtractTypedComponents (vector< \fBTComponentFrame\fP< T > *> & results, const string & pattern = \fC'*'\fP)\fC [inline]\fP"
template function returning \fBTComponentFrame\fP objects corresponding to AcceleratorComponents of type T\&. pattern is optional string pattern which can be used to match only those components with a specific (unqualified) name\&. Components are returned in \fBBeamline\fP order\&. 
.PP
\fBParameters:\fP
.RS 4
\fIresults\fP A vector container for pointers to the type of AcceleratorComponents one wishes to match\&. 
.br
\fIpattern\fP A string containing the pattern of unqualified element names to match\&. Default is to match all elements\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
An integer containing the number of matched components 
.RE
.PP

.SS "template<class T > int AcceleratorModel::ExtractTypedElements (T & results, const string & pattern = \fC'*'\fP)\fC [inline]\fP"
template function returning ModelElements of type T\&. pattern is optional string pattern which can be used to match only those components with a specific (unqualified) name\&. Order is undefined\&. 
.PP
\fBParameters:\fP
.RS 4
\fIresults\fP A vector container for pointers to the type of ModelElements one wishes to match\&. 
.br
\fIpattern\fP A string containing the pattern of unqualified element names to match\&. Default is to match all elements\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
An integer containing the number of matched components 
.RE
.PP

.SS "int AcceleratorModel::FindElementLatticePosition (string RequestedElement)"
Find the lattice position of a given element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIRequestedElement\fP The name of the requested element to find\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
An integer containing the number of the element in the lattice\&. 
.RE
.PP

.SS "size_t AcceleratorModel::GetAcceleratorSupports (AcceleratorSupportList & supports)"
Access to \fBAcceleratorSupport\fP objects\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsupports\fP A reference to the requested output location for the accelerator support list\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The number of found accelerator supports found\&. 
.RE
.PP

.SS "\fBAcceleratorModel::Beamline\fP AcceleratorModel::GetBeamline ()"
Returns the entire beamline of the model\&. 
.PP
\fBReturns:\fP
.RS 4
The entire \fBBeamline\fP for this \fBAcceleratorModel\fP\&. 
.RE
.PP

.SS "\fBAcceleratorModel::Beamline\fP AcceleratorModel::GetBeamline (AcceleratorModel::Index n1, AcceleratorModel::Index n2)"
Returns the beamline from elements n1 to n2\&. 
.PP
\fBParameters:\fP
.RS 4
\fIn1\fP The index of the first element to return in the \fBBeamline\fP\&. 
.br
\fIn2\fP The index of the last element to return in the \fBBeamline\fP\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIThrows\fP a \fBBadRange\fP exception if the requested range cannot be found\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The requested \fBBeamline\fP\&. 
.RE
.PP

.SS "\fBAcceleratorModel::Beamline\fP AcceleratorModel::GetBeamline (const string & pat1, const string & pat2, int n1 = \fC1\fP, int n2 = \fC1\fP)"
Returns a \fBBeamline\fP from the n1-th occurrence of the component whose qualified name matches the pattern pat1, to the n2-th occurrence of the component matching patl2\&. Throws \fBBadRange\fP if no section is found\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpat1\fP A string containing the qualified name of the elements to match for the start of the \fBBeamline\fP\&. 
.br
\fIpat2\fP A string containing the qualified name of the elements to match for the end of the \fBBeamline\fP\&. 
.br
\fIn1\fP The number of the occurrence of pat1 from which to start the \fBBeamline\fP (default is the first)\&. 
.br
\fIn2\fP The number of the occurrence of pat2 from which to end the \fBBeamline\fP (default is the first)\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIThrows\fP a \fBBadRange\fP exception if the requested range cannot be found\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The requested \fBBeamline\fP\&. 
.RE
.PP

.SS "\fBLatticeFrame\fP& AcceleratorModel::GetGlobalFrame ()\fC [inline]\fP"
Returns the top-level \fBLatticeFrame\fP (global frame) for the model\&. The global frame is the root object of the lattice frame hierachy\&. 
.PP
\fBReturns:\fP
.RS 4
The \fBLatticeFrame\fP containing the globalFrame\&. 
.RE
.PP

.SS "const \fBLatticeFrame\fP& AcceleratorModel::GetGlobalFrame () const\fC [inline]\fP"
Returns the top-level \fBLatticeFrame\fP (global frame) for the model\&. The global frame is the root object of the lattice frame hierachy\&. const version\&. 
.PP
\fBReturns:\fP
.RS 4
The \fBLatticeFrame\fP containing the globalFrame\&. 
.RE
.PP

.SS "size_t AcceleratorModel::GetIndecies (const std::string & pat, std::vector< Index > & iarray) const"
Returns the indecies of components matching par in iarray for the entire beamline\&. iarray is overwritten by this function\&. Function returns length of iarray\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpat\fP A string containing the pattern of element names to match\&. 
.br
\fIiarray\fP A vector array holding the Indecies of the element locations that matched the name pattern\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A size_t containing the number of matched elements 
.RE
.PP

.SS "size_t AcceleratorModel::GetIndecies (const \fBBeamline\fP & aBeamline, const std::string & pat, std::vector< Index > & iarray) const"
Same as above, but limits search to the specified (sub-)beamline\&. 
.PP
\fBParameters:\fP
.RS 4
\fIaBeamline\fP The (sub) \fBBeamline\fP to search\&. 
.br
\fIpat\fP A string containing the pattern of element names to match\&. 
.br
\fIiarray\fP A vector array holding the Indecies of the element locations that matched the name pattern\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A size_t containing the number of matched elements\&. 
.RE
.PP

.SS "\fBAcceleratorModel::Beamline\fP AcceleratorModel::GetReversedBeamline ()"
Returns the reversed complete beamline of the model\&. 
.PP
\fBReturns:\fP
.RS 4
The reversed \fBBeamline\fP 
.RE
.PP

.SS "\fBAcceleratorModel::RingIterator\fP AcceleratorModel::GetRing (int n = \fC0\fP)"
Assumes that the \fBAcceleratorModel\fP represents a ring accelerator, and returns a RingIterator which iterates continuously the ring\&. n represents the offset from the beginning of the ring as defined in the \fBAcceleratorModel\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIn\fP An integer containing the offset from the beginning of the ring in number of elements\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A RingIterator for the entire ring starting at position n\&. 
.RE
.PP

.SS "size_t AcceleratorModel::GetROChannels (const string & chID, std::vector< \fBROChannel\fP *> & channels)"
Returns in channels all ROChannels matching chID\&. Returns the number of channels found\&. 
.PP
\fBParameters:\fP
.RS 4
\fIchID\fP A string containing the pattern of channel names to match\&. 
.br
\fIchannels\fP A vector array holding the ROChannels that matched the chID pattern\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A size_t containing the number of matched channels\&. 
.RE
.PP

.SS "size_t AcceleratorModel::GetROChannels (\fBAcceleratorModel::Beamline\fP & aBeamline, const std::string & chID, std::vector< \fBROChannel\fP *> & channels)"
Returns read-only channels matching chid for all matching components in aBeamline\&. Note that only channels associated with AcceleratorComponents can be extracted using this method\&. 
.PP
\fBParameters:\fP
.RS 4
\fIaBeamline\fP The (sub) \fBBeamline\fP to search\&. 
.br
\fIchID\fP A string containing the pattern of channel names to match\&. 
.br
\fIchannels\fP A vector array holding the RWChannels that matched the chID pattern\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A size_t containing the number of matched channels\&. 
.RE
.PP

.SS "size_t AcceleratorModel::GetRWChannels (const string & chID, std::vector< \fBRWChannel\fP *> & channels)"
Returns in channels all RWChannels matching chID\&. Returns the number of channels found\&. 
.PP
\fBParameters:\fP
.RS 4
\fIchID\fP A string containing the pattern of channel names to match\&. 
.br
\fIchannels\fP A vector array holding the RWChannels that matched the chID pattern\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A size_t containing the number of matched channels\&. 
.RE
.PP

.SS "size_t AcceleratorModel::GetRWChannels (\fBAcceleratorModel::Beamline\fP & aBeamline, const std::string & chID, std::vector< \fBRWChannel\fP *> & channels)"
Returns read-write channels matching chid for all matching components in aBeamline\&. Note that only channels associated with AcceleratorComponents can be extracted using this method\&. 
.PP
\fBParameters:\fP
.RS 4
\fIaBeamline\fP The (sub) \fBBeamline\fP to search\&. 
.br
\fIchID\fP A string containing the pattern of channel names to match\&. 
.br
\fIchannels\fP A vector array holding the RWChannels that matched the chID pattern\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A size_t containing the number of matched channels\&. 
.RE
.PP

.SS "void AcceleratorModel::ReportModelStatistics (std::ostream & os) const"
Prints to the specified stream statistics about the model\&. 
.PP
\fBParameters:\fP
.RS 4
\fIos\fP The stream to output the model statistics to\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Merlin from the source code\&.
