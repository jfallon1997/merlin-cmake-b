.TH "MaterialMixture" 3 "Fri Aug 4 2017" "Version 5.02" "Merlin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MaterialMixture
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <MaterialMixture\&.h>\fP
.PP
Inherits \fBMaterial\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "double \fBCalculateElectronDensity\fP ()"
.br
.ti -1c
.RI "double \fBCalculatePlasmaEnergy\fP ()"
.br
.ti -1c
.RI "double \fBCalculateMeanExcitationEnergy\fP ()"
.br
.ti -1c
.RI "double \fBCalculateRadiationLength\fP ()"
.br
.ti -1c
.RI "double \fBCalculateSixtrackdEdx\fP ()"
.br
.ti -1c
.RI "void \fBSetName\fP (std::string)"
.br
.ti -1c
.RI "void \fBSetSymbol\fP (std::string)"
.br
.ti -1c
.RI "void \fBSetConductivity\fP (double)"
.br
.ti -1c
.RI "void \fBSetRadiationLength\fP (double)"
.br
.ti -1c
.RI "void \fBSetDensity\fP (double)"
.br
.ti -1c
.RI "void \fBSetElectronDensity\fP (double)"
.br
.ti -1c
.RI "void \fBSetMeanExcitationEnergy\fP (double)"
.br
.ti -1c
.RI "void \fBSetPlasmaEnergy\fP (double)"
.br
.ti -1c
.RI "void \fBSetSixtrackdEdx\fP (double)"
.br
.ti -1c
.RI "double \fBGetAtomicNumber\fP () const"
.br
.ti -1c
.RI "std::string \fBGetName\fP () const"
.br
.ti -1c
.RI "std::string \fBGetSymbol\fP () const"
.br
.ti -1c
.RI "double \fBGetAtomicMass\fP () const"
.br
.ti -1c
.RI "double \fBGetConductivity\fP () const"
.br
.ti -1c
.RI "double \fBGetRadiationLength\fP () const"
.br
.ti -1c
.RI "double \fBGetRadiationLengthInM\fP () const"
.br
.ti -1c
.RI "double \fBGetDensity\fP () const"
.br
.ti -1c
.RI "double \fBGetElectronDensity\fP () const"
.br
.ti -1c
.RI "double \fBGetMeanExcitationEnergy\fP () const"
.br
.ti -1c
.RI "double \fBGetPlasmaEnergy\fP () const"
.br
.ti -1c
.RI "double \fBGetSixtrackTotalNucleusCrossSection\fP () const"
.br
.ti -1c
.RI "double \fBGetSixtrackInelasticNucleusCrossSection\fP () const"
.br
.ti -1c
.RI "double \fBGetSixtrackRutherfordCrossSection\fP () const"
.br
.ti -1c
.RI "double \fBGetSixtrackdEdx\fP () const"
.br
.ti -1c
.RI "double \fBGetSixtrackNuclearSlope\fP () const"
.br
.ti -1c
.RI "bool \fBVerifyMaterial\fP () const"
.br
.ti -1c
.RI "bool \fBAddMaterialByMassFraction\fP (\fBMaterial\fP *, double)"
.br
.ti -1c
.RI "bool \fBAddMaterialByNumberFraction\fP (\fBMaterial\fP *, double)"
.br
.ti -1c
.RI "\fBMaterial\fP * \fBSelectRandomMaterial\fP ()"
.br
.ti -1c
.RI "\fBMaterial\fP * \fBGetCurrentMaterial\fP ()"
.br
.ti -1c
.RI "bool \fBAssemble\fP ()"
.br
.ti -1c
.RI "bool \fBIsAssembled\fP ()"
.br
.ti -1c
.RI "virtual bool \fBIsMixture\fP () const"
.br
.ti -1c
.RI "std::vector< std::pair< std::string, double > > \fBGetConstituentElements\fP ()"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
A material mixture is a mixture of assorted materials, e\&.g\&. a metal alloy It contains a map with the component materials\&. Since it inherits from the base \fBMaterial\fP class, the same functions can be used in scattering, etc\&. Some properties will be the weighted mean of the component properties\&. Some will be discrete values where a material selection must be made at random\&. To support this the \fBMaterial\fP functions are virtual, and are overridden here\&. 
.SH "Member Function Documentation"
.PP 
.SS "bool MaterialMixture::AddMaterialByMassFraction (\fBMaterial\fP * m, double f)"
This function adds materials by mass fraction i\&.e\&. if 5% of the material by mass is element m, the double here is 0\&.05, etc\&. 
.SS "bool MaterialMixture::AddMaterialByNumberFraction (\fBMaterial\fP * m, double f)"
This function adds materials by number density fraction i\&.e\&. if 5% of the component atoms are element m, the double here is 0\&.05, etc\&. 
.SS "bool MaterialMixture::Assemble ()"
Assembles the material 
.SS "std::vector< std::pair< std::string, double > > MaterialMixture::GetConstituentElements ()"
Return list of constitutent element symbols as strings 
.SS "\fBMaterial\fP * MaterialMixture::GetCurrentMaterial ()"
Returns CurrentElement\&. 
.SS "std::string MaterialMixture::GetName () const\fC [virtual]\fP"
Accessors 
.PP
Reimplemented from \fBMaterial\fP\&.
.SS "bool MaterialMixture::IsAssembled ()"
Is this material ready to be used? 
.SS "bool MaterialMixture::IsMixture () const\fC [virtual]\fP"
Is this a compound material? true for compounds, false for elements 
.PP
Reimplemented from \fBMaterial\fP\&.
.SS "\fBMaterial\fP * MaterialMixture::SelectRandomMaterial ()\fC [virtual]\fP"
Returns a random element and sets CurrentElement to this element also\&. 
.PP
Reimplemented from \fBMaterial\fP\&.
.SS "void MaterialMixture::SetName (std::string p)\fC [virtual]\fP"
Set parameters 
.PP
Reimplemented from \fBMaterial\fP\&.
.SS "bool MaterialMixture::VerifyMaterial () const\fC [virtual]\fP"
Check that the material properties make some sort of sense 
.PP
Reimplemented from \fBMaterial\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Merlin from the source code\&.
