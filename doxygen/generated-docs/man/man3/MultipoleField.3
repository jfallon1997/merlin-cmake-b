.TH "MultipoleField" 3 "Fri Aug 4 2017" "Version 5.02" "Merlin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MultipoleField
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBEMField\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef std::vector< \fBComplex\fP > \fBTermExpansion\fP"
.br
.ti -1c
.RI "typedef TermExpansion::iterator \fBiterator\fP"
.br
.ti -1c
.RI "typedef TermExpansion::const_iterator \fBconst_iterator\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBMultipoleField\fP (double scale, size_t nt=0)"
.br
.ti -1c
.RI "\fBMultipoleField\fP (int np, double bn, double an, double r0)"
.br
.ti -1c
.RI "\fBMultipoleField\fP (int np, double bn, double r0, bool skew=false)"
.br
.ti -1c
.RI "\fBMultipoleField\fP (int np, double bn, bool skew=false)"
.br
.ti -1c
.RI "double \fBGetFieldScale\fP () const"
.br
.ti -1c
.RI "void \fBSetFieldScale\fP (double scale)"
.br
.ti -1c
.RI "bool \fBIsNullField\fP () const"
.br
.ti -1c
.RI "\fBComplex\fP \fBGetKn\fP (int np, double rigidity) const"
.br
.ti -1c
.RI "\fBComplex\fP \fBGetField2D\fP (double x, double y, int exclude=\-1) const"
.br
.ti -1c
.RI "virtual \fBVector3D\fP \fBGetBFieldAt\fP (const \fBPoint3D\fP &x, double t=0) const"
.br
.ti -1c
.RI "virtual \fBVector3D\fP \fBGetEFieldAt\fP (const \fBPoint3D\fP &x, double t=0) const"
.br
.ti -1c
.RI "virtual \fBVector3D\fP \fBGetForceAt\fP (const \fBPoint3D\fP &x, const \fBVector3D\fP &v, double q, double t=0) const"
.br
.ti -1c
.RI "void \fBRotateY180\fP ()"
.br
.ti -1c
.RI "void \fBPrintField\fP (std::ostream &os) const"
.br
.ti -1c
.RI "void \fBSetComponent\fP (size_t np, double bn, double an=0, double r0=1)"
.br
.ti -1c
.RI "\fBComplex\fP \fBGetComponent\fP (size_t np, double r0=1\&.0) const"
.br
.ti -1c
.RI "\fBComplex\fP \fBGetCoefficient\fP (size_t np, double r0=1\&.0) const"
.br
.ti -1c
.RI "void \fBSetCoefficient\fP (size_t np, const \fBComplex\fP &b, double r0=1\&.0)"
.br
.ti -1c
.RI "int \fBHighestMultipole\fP () const"
.br
.ti -1c
.RI "int \fBLowestMultipole\fP () const"
.br
.in -1c
.SH "Member Function Documentation"
.PP 
.SS "\fBVector3D\fP MultipoleField::GetBFieldAt (const \fBPoint3D\fP & x, double t = \fC0\fP) const\fC [virtual]\fP"
Returns the magnetic field at the point x and time t\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP The location of the particle\&. 
.br
\fIt\fP The time when the force is applied\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A Vector3D containing the magnetic field\&. 
.RE
.PP

.PP
Implements \fBEMField\fP\&.
.SS "\fBVector3D\fP MultipoleField::GetEFieldAt (const \fBPoint3D\fP & x, double t = \fC0\fP) const\fC [virtual]\fP"
Returns the electric field at the point x and time t 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP The location of the particle\&. 
.br
\fIt\fP The time when the force is applied\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A Vector3D containing the electric field\&. 
.RE
.PP

.PP
Implements \fBEMField\fP\&.
.SS "\fBVector3D\fP MultipoleField::GetForceAt (const \fBPoint3D\fP & x, const \fBVector3D\fP & v, double q, double t = \fC0\fP) const\fC [virtual]\fP"
Returns the force due to this field on a particle of charge q with position x and velocity v at time t\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP The location of the particle\&. 
.br
\fIv\fP The velocity of the particle\&. 
.br
\fIq\fP The charge of the particle\&. 
.br
\fIt\fP The time when the force is applied\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A Vector3D containing the force on a particle of charge q\&. 
.RE
.PP

.PP
Reimplemented from \fBEMField\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Merlin from the source code\&.
